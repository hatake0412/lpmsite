  <h1 class="title">インストール方法</h1>
      <p>wget なりブラウザなりでファイルをダウンロードして実行権限を立て、lpm initlocaldir と実行すれば全て自動でインストール作業が走ります。以下、実行例です：</p>
      <p class="ex">$ wget http://www.kasahara.ws/lpm/lpm<br />$ chmod +x ./lpm<br />$ ./lpm initlocaldir<br /></p>
      <p>インストールが終わると ~/lcl/bin/lpm に lpm 本体がコピーされますので、ダウンロードした lpm は消してしまっても大丈夫です。</p>
      <p class="ex">$ rm lpm</p>
  <h2>インストールすると何が走るか</h2>
      <p>この項目は内部動作を知りたい人向けで、単なるユーザーはスキップしても問題ありません。以下、LPM のインストール時の動作を解説します。</p>
      <p>LPM は ~/lcl というディレクトリに下にほとんど全てのソフトをインストールし、設定を書き込みます。このディレクトリを<span style="font-weight: bold;">ローカルディレクトリ</span>と呼びます。ローカルディレクトリは --local オプションで変更することもできます。</p>
      <p>Sourceforge に paco というとても秀逸なパッケージ管理ソフトがあるのですが、LPM はインストール作業中に paco の最新版をダウンロードしてローカルディレクトリ 以下にインストールします。 paco を使うとたいていのソフトの<span style="font-weight: bold;">アン</span>インストールが自動化できますが、 lpm は paco の機能を使うことでアンインストールを実現しています。</p>
      <p>その次に、.bash_profile や .bashrc (tcsh や zsh を使っている人は同等のファイル) に
~/lcl/.bash_profile や ~/lcl/.bashrc も参照するように source 命令を書き加えます。bash/csh/tcsh/zsh 以外のシェルのことは考えていません。ファイルを分離した理由は、~/.bashrc
等に頻繁に書き込むと壊れたときが怖いのと、複数のローカルディレクトリを持って on/off するケースに対応したかったからです。例えば私用のソフトは ~/lcl に入れ、開発用は ~/dev 以下に入れることで、開発中には ~/lcl
以下のソフトを参照しないようにすることが簡単にできます。</p>
      
      <p>次に、~/lcl 以下の .bashrc などのスタートアップファイルに、 ~/lcl/bin に PATH を通したり /lcl/lib に LD_LIBRARY_PATH
を通したり、 ~/lcl/man に MAN_PATH を通したりする設定を書き込みます。
次回ログイン時にはこのへんの設定が（シェルによって）読み込まれ、ローカルディレクトリにインストールしたソフトやマニュアルが使えるようになります。</p>
      <p>最後に LPM は paco と lpm 自身をローカルディレクトリにインストールします。このため、最初にダウンロードした lpm は不要になります。</p>
